{
  "title": "Некорректное использование хука useState в React",
  "goals": [
    "Показать неправильный подход к работе с состоянием в React-компоненте.",
    "Закрепление понимания правильной работы с состоянием и обработчиками событий."
  ],
  "training_topic": "Изучение некорректного использования хука useState в React.",
  "required_resources": [
    "Редактор кода (VS Code, Sublime Text и т.д.).",
    "React-проект (готовое приложение или созданный вручную)."
  ],
  "instructions": [
    "Введение в упражнение:",
    "- Цель упражнения — продемонстрировать, что прямое изменение переменной состояния в React-компоненте, возвращённой из хука useState, не приводит к ожидаемому поведению (перерендингу).",
    "",
    "Внимание!",
    "- Данное упражнение намеренно выполнено некорректно, чтобы подчеркнуть, как нельзя поступать при работе с состоянием в React.",
    "",
    "Шаг 1. Подготовьте рабочую среду:",
    "- Откройте редактор кода и создайте или откройте существующую папку с React-проектом.",
    "",
    "Шаг 2. Создание компонента App.js с некорректным использованием хука useState:",
    "- Создайте файл `App.js` и поместите в него следующий код компонента:",
    {
      "type": "code",
      "title": "Компонент App.js (некорректный вариант)",
      "code": "import React, { useState } from 'react'; const App = () => { let [state, _] = useState(0); const [secondState, setSecondState] = useState(0); const handleClick = () => { state++; alert(`Переменная состояния 'state' равна ${state}`); }; const handleClickSecondState = () => { setSecondState(secondState + 1); }; alert(`Рендер переменной состояния 'state' ${state}`); return ( <div> <h1>Некорректное использование хука useState</h1> <section> <h2>1. Нажми сначала 5 раз кнопку А</h2> <button onClick={handleClick}>Кнопка А</button> </section> <section> <h2>2. Нажми кнопку Б через 5 раз нажатия кнопки А</h2> <button onClick={handleClickSecondState}>Кнопка Б</button> </section> </div> ); }; export default App;"
    },
    "",
    "Шаг 3. Изучение кода компонента:",
    "- Переменная состояния `state` объявлена некорректно с помощью оператора `let`, что нарушает принципы иммутабельности состояния в React.",
    "- Переменная состояния `secondState` объявлена корректно, и её изменение осуществляется через специальную функцию `setSecondState`, что соответствует стандартам React.",
    "- Функции `handleClick` и `handleClickSecondState` предназначены для изменения переменных состояния, но первая функция нарушает правила работы с состоянием, изменяя переменную напрямую.",
    "",
    "Шаг 4. Запуск и просмотр результата:",
    "- Запустите проект с помощью команды `npm start` или аналогичной.",
    "- Откройте браузер и выполните следующие действия:",
    {
      "type": "enumeration",
      "items": [
        "Нажмите пять раз кнопку «Кнопка А» и заметьте, что переменная состояния `state` увеличивается, но компонент не перерендеривается.",
        "Затем нажмите кнопку «Кнопка Б», которая корректно меняет переменную состояния `secondState`, вызывая перерендинг компонента."
      ]
    },
    "",
    "Заключение:",
    "- Вы изучили, как неправильное использование хука useState ведёт к нарушению принципа иммутабельности состояния и отсутствию ожидаемого поведения компонента."
  ],
  "reflection_questions": [
    "Почему изменение переменной состояния напрямую не приводит к перерендингу компонента в React?",
    "Какие правила следует соблюдать при работе с состоянием в React-компонентах?",
    "Какие последствия ожидают при нарушении этих правил?"
  ],
  "additional_materials": [
    {
    "type": "link",
    "title": "Файлы для выполнения упражнения",
    "name": "1",
    "folder": "3",
    "chapter": "5.6"
    }, 
    "Документация React: https://react.dev/reference/react/useState"
  ],
  "final_conclusion": [
    "Вы изучили некорректный подход к работе с состоянием в React-компонентах, закрепив понимание необходимости соблюдения правил иммутабельности и использования функции setState для изменения состояния."
  ]
}