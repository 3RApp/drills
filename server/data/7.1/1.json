{
  "title": "Анализ файловой структуры React-приложения",
  "goals": [
    "Практическое освоение навыков чтения и анализа файловой структуры React-приложения.",
    "Закрепление понимания принципов распределения элементов приложения по папкам."
  ],
  "training_topic": "Анализ файловой структуры React-приложения.",
  "required_resources": [
    "Редактор кода (VS Code, Sublime Text и т.д.).",
    "React-проект (готовое приложение или созданный вручную)."
  ],
  "instructions": [
    "Введение в упражнение:",
    "- Цель упражнения — научиться читать и анализировать файловую структуру React-приложения, чтобы быстро понимать, какие элементы приложения находятся в каких файлах и как они связаны между собой.",
    "",
    "Шаг 1. Ознакомьтесь с изображением файловой структуры приложения:",
    {
      "type": "image",
      "title": "Структура файлов приложения",
      "name": "1",
      "format": "png",
      "folder": "1",
      "chapter": "7.1"
    },
    "- На изображении размещены следующие элементы: файл конфигурации маршрутизатора и папка стора редакс тулкит; папка для лэйаута; папки страниц, бизнес-компонентов, простых конечных компонентов, функций, а также хуков.",
    "",
    "Шаг 2. Анализ файловой структуры на основе принципа 1 (роли компонентов):",
    "- Изучите файловую структуру и определите, какие типы компонентов есть у вас в приложении на основе папок и файлов и сравните с приведенным списком в шаге 1. Провайдеры располагаются в корне (src), страницы — в папке pages, бизнес-компоненты — в папке business, лэйаут — в папке layout, простые конечные компоненты — в папке components. Все папки pages, layout, business, components располагаются в src.",
    "",
    "Шаг 3. Анализ файловой структуры на основе принципа 2 (группировка и глубина размещения):",
    "- Изучите файловую структуру и определите, как остальные элементы приложения (функции, хуки) распределены по папкам. Обратите внимание на то, как глубина размещения элементов зависит от количества ролей компонентов, в которых они используются. Функции и хуки располагаются в папках на основе принципа 2. ",
    "- Вот, что можно сказать. Папка src/hooks говорит нам, что в этой папке расположены хуки, которые могут задействоваться в компонентах с разными ролями, например в бизнес-компонентах и страницах. ",
    "- Хук, расположенный в src/pages/FirstPage/hooks.js, используется исключительно в компоненте FirstPage. ",
    "- Функции и хуки расположенные в папках src/pages/functions и src/pages/hooks.js используются исключительно в компонентах с ролью Страница.",
    "Если вы сделали аналогичные выводы, поздравляем!",
    "",
    "Заключение:",
    "- Вы освоили навыки чтения и анализа файловой структуры React-приложения, что позволит вам быстро понимать, какие элементы приложения находятся в каких файлах и как они связаны между собой. Аналогичная структура переиспользуется в других приложениях, где компоненты создаются на основе ролей."
  ],
  "reflection_questions": [
    "Какие принципы используются для распределения элементов приложения по папкам?",
    "Как глубина размещения элементов в файловой структуре зависит от количества ролей компонентов, в которых они используются?",
    "Какие выводы можно сделать о структуре и логике приложения на основе анализа файловой структуры?",
    "Как использование принципов распределения элементов по папкам влияет на масштабируемость и поддерживаемость приложения?",
    "Какие преимущества и недостатки у предложенной структуры файловой системы для React-приложений?"
  ],
  "additional_materials": [
    "Документация React: https://react.dev/"
  ],
  "final_conclusion": [
    "Вы освоили навыки чтения и анализа файловой структуры React-приложения, что позволит вам эффективно работать с React-приложениями и улучшать их структуру и производительность."
  ]
}