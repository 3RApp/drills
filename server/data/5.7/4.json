{
  "title": "Ошибочное использование зависимостей в хуке useEffect",
  "goals": [
    "Практическое освоение правильного использования зависимостей в хуке useEffect.",
    "Закрепление навыков выявления ошибок при передаче неиспользуемых зависимостей."
  ],
  "training_topic": "Диагностика проблем при неправильном выборе зависимостей в хуке useEffect.",
  "required_resources": [
    "Редактор кода (VS Code, Sublime Text и т.д.).",
    "React-проект (готовое приложение или созданный вручную)."
  ],
  "instructions": [
    "Введение в упражнение:",
    "- Цель упражнения — выявить проблемы возникающие при передаче в хук useEffect зависимости которая не используется в самом хуке и устранить данную ошибку.",
    "",
    "Шаг 1. Подготовьте рабочую среду:",
    "- Откройте редактор кода и создайте или откройте существующую папку с React-проектом.",
    "",
    "Шаг 2. Создание компонента Parent.js с использованием хука useState:",
    "- Создайте файл `Parent.js` и поместите в него следующий код компонента:",
    {
      "type": "code",
      "title": "Компонент Parent.js",
      "code": "import React, { useState, useEffect } from 'react'; import Child from './Child'; const Parent = () => { const [parentState, setParentState] = useState(0); const [otherState, setOtherState] = useState(0); useEffect(() => { console.log('Родительский'); }, [parentState]); return ( <div> <h1>Родительский компонент</h1> <p>Значение parentState: {parentState}</p> <p>Значение otherState: {otherState}</p> <button onClick={() => setParentState(parentState + 1)}>Изменить parentState</button> <button onClick={() => setOtherState(otherState + 1)}>Изменить otherState</button> <Child dependency={parentState} /> </div> ); }; export default Parent;"
    },
    "",
    "Шаг 3. Создание дочернего компонента Child.js с использованием хука useEffect:",
    "- Создайте файл `Child.js` и поместите в него следующий код компонента:",
    {
      "type": "code",
      "title": "Компонент Child.js",
      "code": "import React, { useEffect } from 'react'; const Child = ({ dependency }) => { useEffect(() => { console.log('Дочерний'); }, [dependency]); return <div>Дочерний компонент</div>; }; export default Child;"
    },
    "",
    "Шаг 4. Создание компонента App.js для импорта Parent.js:",
    "- Создайте файл `App.js` и поместите в него следующий код компонента:",
    {
      "type": "code",
      "title": "Компонент App.js",
      "code": "import React from 'react'; import Parent from './Parent'; const App = () => { return <Parent />; }; export default App;"
    },
    "",
    "Шаг 5. Изучение кода компонента:",
    "- В компоненте `Parent.js` объявлено два состояния: `parentState` и `otherState`, первое из которых передано в дочерний компонент `Child` в качестве зависимости.",
    "- Хук `useEffect` в родительском компоненте вызывает запись в консоль при изменении `parentState`, но всё же зависимость не используется в хуке useEffect, что означает неверное использование.",
    "- В дочернем компоненте `Child.js` хук `useEffect` также принимает зависимость `dependency`, но сама эта зависимость не используется в теле хука что приводит к лишним вызовам сайд-эффекта.",
    "",
    "Шаг 6. Запуск и просмотр результата:",
    "- Запустите проект с помощью команды `npm start` или аналогичной.",
    "- Откройте браузер и нажмите на кнопки «Изменить parentState» и «Изменить otherState». Обратите внимание на записи в консоли и частые вызовы хука `useEffect` в дочернем компоненте что свидетельствует о проблеме с выборкой зависимости.",
    "",
    "Шаг 7. Устранение ошибки и оптимизация кода:",
    "- Удалите ненужную зависимость из хука `useEffect` в дочернем компоненте `Child.js`, оставив массив пустым или вовсе опустив его чтобы избежать лишних вызовов сайд-эффекта.",
    "- Удалите ненужную зависимость из хука `useEffect` в родительском компоненте `Parent.js`",
    "- Протестируйте вновь работу приложения и убедитесь, что дополнительные рендеры больше не возникают.",
    "",
    "Заключение:",
    "- Вы выявили проблему возникающую при передаче неиспользуемых зависимостей в хук useEffect и устранили её оптимизировав производительность компонента."
  ],
  "reflection_questions": [
    "Почему важно правильно выбирать зависимости в хуке useEffect?",
    "Какие последствия ожидают при передаче неиспользуемых зависимостей?",
    "Какие стратегии позволяют минимизировать вероятность ошибок при выборе зависимостей?"
  ],
  "additional_materials": [
    {
    "type": "link",
    "title": "Файлы для выполнения упражнения",
    "name": "1",
    "folder": "4",
    "chapter": "5.7"
    },       
    "Документация React: https://react.dev/reference/react/useEffect"
  ],
  "final_conclusion": [
    "Вы освоили правильное использование зависимостей в хуке useEffect диагностировали и устранили распространённую ошибку повысив эффективность и стабильность приложения."
  ]
}