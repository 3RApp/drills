{
  "title": "Использование свойства children в React-компонентах",
  "goals": [
    "Практическое освоение использования свойства children для передачи вложенных компонентов.",
    "Закрепление навыков работы с JSX и композицией компонентов."
  ],
  "training_topic": "Композиция компонентов с использованием свойства children в React.",
  "required_resources": [
    "Редактор кода (VS Code, Sublime Text и т.д.).",
    "React-проект (готовое приложение или созданный вручную)."
  ],
  "instructions": [
    "Введение в упражнение:",
    "- Цель упражнения — научиться использовать свойство children для передачи вложенных компонентов в React что позволяет создавать более гибкие и переиспользуемые компоненты.",
    "",
    "Шаг 1. Подготовьте рабочую среду:",
    "- Откройте редактор кода и создайте или откройте существующую папку с React-проектом.",
    "",
    "Шаг 2. Создание компонента Wrapper.js для использования свойства children:",
    "- Создайте файл `Wrapper.js` и поместите в него следующий код компонента:",
    {
      "type": "code",
      "title": "Компонент Wrapper.js",
      "code": "import React from 'react'; const Wrapper = ({ children }) => ( <div style={{ border: '1px solid black', padding: '10px' }}> {children} </div> ); export default Wrapper;"
    },
    "",
    "Шаг 3. Использование компонента Wrapper в App.js с передачей вложенных компонентов:",
    "- Создайте файл `App.js` и поместите в него следующий код компонента:",
    {
      "type": "code",
      "title": "Компонент App.js",
      "code": "import React from 'react'; import Wrapper from './Wrapper'; const App = () => ( <div> <h1>Использование свойства children</h1> <Wrapper> <p>Это текст внутри компонента Wrapper.</p> <button>Кнопка внутри Wrapper</button> </Wrapper> </div> ); export default App;"
    },
    "",
    "Шаг 4. Изучение кода компонента:",
    "- В компоненте `Wrapper.js` используется свойство `children` для рендеринга вложенных компонентов переданных в него через JSX.",
    "- В компоненте `App.js` компонент `Wrapper` используется как родительский внутрь которого помещаются другие компоненты (текст и кнопка).",
    "",
    "Шаг 5. Запуск и просмотр результата:",
    "- Запустите проект с помощью команды `npm start` или аналогичной.",
    "- Откройте браузер и убедитесь что компонент `Wrapper` корректно отображает вложенные компоненты с заданным стилем.",
    "- Попробуйте изменить стиль компонента `Wrapper`, например, добавьте цвет фона или измените размер шрифта.",
    "- Добавьте ещё один вложенный компонент внутрь `Wrapper`, а именно список:",
    {
      "type": "code",
      "title": "UnorderedList",
      "code": "<ul><li>Элемент 1</li><li>Элемент 2</li></ul>"
    },
    "",
    "Заключение:",
    "- Вы освоили использование свойства children для передачи вложенных компонентов в React что позволяет создавать более гибкие и переиспользуемые компоненты."
  ],
  "reflection_questions": [
    "Как свойство children помогает в композиции компонентов в React?",
    "Какие преимущества даёт использование свойства children перед передачей отдельных пропсов?",
    "Какие сценарии использования свойства children наиболее распространены в React-разработке?"
  ],
  "additional_materials": [
    {
    "type": "link",
    "title": "Файлы для выполнения упражнения",
    "name": "1",
    "folder": "1",
    "chapter": "5.8"
    },     
    "Документация React: https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children"
  ],
  "final_conclusion": [
    "Вы освоили использование свойства children в React научились передавать вложенные компоненты и создавать более гибкие и переиспользуемые компоненты."
  ]
}