{
  "title": "Перенос функциональности из компонента в кастомный хук",
  "goals": [
    "Практическое освоение переноса функциональности из компонента в кастомный хук.",
    "Закрепление навыков работы с хуками и их API."
  ],
  "training_topic": "Создание кастомных хуков в React на основе существующей функциональности компонента.",
  "required_resources": [
    "Редактор кода (VS Code, Sublime Text и т.д.).",
    "React-проект (готовое приложение или созданный вручную)."
  ],
  "instructions": [
    "Введение в упражнение:",
    "- Цель упражнения — научиться переносить функциональность из компонента в кастомный хук, что позволяет улучшить структуру кода и его переиспользование.",
    "",
    "Шаг 1. Подготовьте рабочую среду:",
    "- Откройте редактор кода и создайте или откройте существующую папку с React-проектом.",
    "",
    "Шаг 2. Создание компонента App.js с функциональностью, которую можно перенести в кастомный хук:",
    "- Создайте файл `App.js` и поместите в него следующий код компонента, который управляет состоянием счётчика:",
    {
      "type": "code",
      "title": "Компонент App.js (с функциональностью счётчика)",
      "code": "import React, { useState } from 'react'; const App = () => { const [count, setCount] = useState(0); const increment = () => { setCount(count + 1); }; return ( <div> <h1>Использование функциональности счётчика</h1> <p>Текущее значение счётчика: {count}</p> <button onClick={increment}>Увеличить счётчик</button> </div> ); }; export default App;"
    },
    "",
    "Шаг 3. Создание файла для кастомного хука useCounter.js:",
    "- Создайте файл `useCounter.js` для переноса функциональности из компонента `App.js` в кастомный хук.",
    "",
    "Шаг 4. Перенос функциональности из компонента App.js в кастомный хук useCounter.js:",
    "- Перенесите функциональность из компонента `App.js` в файл `useCounter.js`, шаг за шагом:",
    {
      "type": "code",
      "title": "Создание файла useCounter.js",
      "code": "import { useState } from 'react';"
    },
    "",
    {
      "type": "code",
      "title": "Определение функции useCounter",
      "code": "const useCounter = (initialValue = 0) => {"
    },
    "",
    {
      "type": "code",
      "title": "Создание состояния счётчика",
      "code": "const [count, setCount] = useState(initialValue);"
    },
    "",
    {
      "type": "code",
      "title": "Создание функции для увеличения счётчика",
      "code": "const increment = () => { setCount(count + 1); };"
    },
    "",
    {
      "type": "code",
      "title": "Возврат значений из хука",
      "code": "return { count, increment };"
    },
    "",
    {
      "type": "code",
      "title": "Закрывающая скобка функции и экспорт хука",
      "code": "}; export default useCounter;"
    },
    "",
    "Шаг 5. Обновление компонента App.js для использования кастомного хука useCounter:",
    "- Обновите компонент `App.js`, заменив встроенную функциональность на использование кастомного хука `useCounter`:",
    {
      "type": "code",
      "title": "Компонент App.js (с использованием кастомного хука useCounter)",
      "code": "import React from 'react'; import useCounter from './useCounter'; const App = () => { const { count, increment } = useCounter(0); return ( <div> <h1>Использование кастомного хука useCounter</h1> <p>Текущее значение счётчика: {count}</p> <button onClick={increment}>Увеличить счётчик</button> </div> ); }; export default App;"
    },
    "",
    "Шаг 6. Запуск и просмотр результата:",
    "- Запустите проект с помощью команды `npm start` или аналогичной.",
    "- Откройте браузер и нажмите на кнопку «Увеличить счётчик». Наблюдайте, как значение счётчика увеличивается при каждом нажатии.",
    "",
    "Шаг 7. Добавление второго счётчика в компонент App.js с использованием useCounter:",
    "- Добавьте еще один вызов хука `useCounter` в компонент `App.js` и используйте уникальные идентификаторы для второго счётчика:",
    {
      "type": "code",
      "title": "Компонент App.js (с двумя счётчиками)",
      "code": "import React from 'react'; import useCounter from './useCounter'; const App = () => { const { count, increment } = useCounter(0); const { count: count2, increment: increment2 } = useCounter(10); return ( <div> <h1>Использование кастомного хука useCounter</h1> <p>Текущее значение счётчика 1: {count}</p> <button onClick={increment}>Увеличить счётчик 1</button> <p>Текущее значение счётчика 2: {count2}</p> <button onClick={increment2}>Увеличить счётчик 2</button> </div> ); }; export default App;"
    },
    "",
    "Заключение:",
    "- Вы освоили перенос функциональности из компонента в кастомный хук, что позволяет улучшить структуру кода и его переиспользование."
  ],
  "reflection_questions": [
    "Какие преимущества даёт перенос функциональности в кастомные хуки?",
    "Как организовать API кастомного хука для удобства использования?",
    "Какие сценарии использования кастомных хуков наиболее распространены в React-разработке?"
  ],
  "additional_materials": [
    {
    "type": "link",
    "title": "Файлы для выполнения упражнения",
    "name": "1",
    "folder": "2",
    "chapter": "5.17"
    },         
    "Документация React: https://react.dev/reference/react/useState"
  ],
  "final_conclusion": [
    "Вы освоили перенос функциональности из компонента в кастомный хук в React, научились проектировать их API и использовать в компонентах."
  ]
}