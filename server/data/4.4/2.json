{
  "title": "Создание стора и экшена для приложения на Redux",
  "goals": [
    "Практическое освоение создания сторов и экшенов в Redux.",
    "Закрепление навыков работы с библиотекой Redux в веб-приложениях."
  ],
  "training_topic": "Создание и управление состоянием приложения с помощью Redux.",
  "required_resources": [
    "Файлы: package.json, webpack.config.js, index.html, empty.js (предоставляются преподавателем)."
  ],
  "instructions": [
    "Введение в упражнение:",
    "- Цель упражнения — научиться создавать стор и экшены для управления состоянием приложения с помощью библиотеки Redux.",
    "",
    "Шаг 1. Подготовьте рабочую среду:",
    "- Скачайте и распакуйте архив с файлами, предоставленными преподавателем.",
    "",
    "Шаг 2. Настройка окружения:",
    "- Откройте терминал и перейдите в директорию с проектом.",
    "- Установите зависимости, выполнив команду:",
    {
      "type": "code",
      "title": "Установка зависимостей",
      "code": "npm install"
    },
    "",
    "Шаг 3. Создание стора и экшена:",
    "- Откройте файл `drill.js`.",
    "- Скопируйте и вставьте следующий пример кода в файл `drill.js`, поэтапно заполняя файл:",
    {
      "type": "code",
      "title": "Импорт и объявление начальных данных",
      "code": "import { createStore } from 'redux'; const initialState = { counter: 0 };"
    },
    "",
    "- Добавьте в файл реализацию редюсера:",
    {
      "type": "code",
      "title": "Реализация редюсера",
      "code": "const reducer = (state, action) => { switch(action.type) { case 'INCREMENT': return { counter: state.counter + 1 }; default: return state; } };"
    },
    "",
    "- Создайте стор, вызвав функцию `createStore`, и получите ссылки на основные методы:",
    {
      "type": "code",
      "title": "Создание стора и получение ссылок на методы",
      "code": "const { getState, subscribe, dispatch } = createStore(reducer, initialState);"
    },
    "",
    "- Подпишитесь на изменения состояния и реализуйте функцию логирования изменений:",
    {
      "type": "code",
      "title": "Подписка на изменения и функция логирования",
      "code": "const logState = (str) => console.log('state', getState(), str); const unsubscribe = subscribe(() => logState(`через dispatch`));"
    },
    "",
    "- Произведите первую отправку экшена и повторите попытку изменить состояние напрямую, вне диспетчера:",
    {
      "type": "code",
      "title": "Первая отправка экшена и попытка прямого изменения",
      "code": "logState('до dispatch'); dispatch({ type: 'INCREMENT' }); state.counter++; dispatch({ type: 'INCREMENT' }); logState('после попыток изменения');"
    },
    "",
    "Шаг 4. Сборка и запуск приложения:",
    "- Запустите сборку проекта с помощью команды:",
    {
      "type": "code",
      "title": "Сборка проекта",
      "code": "npm run build"
    },
    "",
    "- Откройте файл `start.html` в браузере и изучите вывод в консоли.",
    "",
    "Заключение:",
    "- Вы создали стор и экшены для приложения, используя библиотеку Redux, и познакомились с механизмом работы диспетчера и редюсера."
  ],
  "reflection_questions": [
    "Какие задачи решает библиотека Redux в веб-приложениях?",
    "В чём заключаются главные функции сторов и экшенов в Redux?",
    "Какие преимущества использования Redux перед простыми локальными состояниями?"
  ],
  "additional_materials": [
    {
    "type": "link",
    "title": "Файлы для выполнения упражнения",
    "name": "1",
    "folder": "2",
    "chapter": "4.4"
    },
    "Документация Redux: https://redux.js.org/introduction/getting-started"
  ],
  "final_conclusion": [
    "Вы освоили создание стора и экшенов в Redux, закладывая основу для работы с большими и сложными приложениями, нуждающимися в централизованном управлении состоянием."
  ]
}