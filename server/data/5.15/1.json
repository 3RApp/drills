{
  "title": "Использование хука useRef для сохранения состояния без перерендера",
  "goals": [
    "Практическое освоение использования хука useRef для сохранения состояния между рендерами.",
    "Закрепление понимания того, что useRef не вызывает перерендер компонента."
  ],
  "training_topic": "Использование хука useRef для сохранения состояния в React-компонентах.",
  "required_resources": [
    "Редактор кода (VS Code, Sublime Text и т.д.).",
    "React-проект (готовое приложение или созданный вручную)."
  ],
  "instructions": [
    "Введение в упражнение:",
    "- Цель упражнения — научиться использовать хук useRef для сохранения состояния между рендерами без вызова перерендера компонента.",
    "",
    "Шаг 1. Подготовьте рабочую среду:",
    "- Откройте редактор кода и создайте или откройте существующую папку с React-проектом.",
    "",
    "Шаг 2. Создание компонента App.js с использованием хука useRef:",
    "- Создайте файл `App.js` и поместите в него следующий код компонента, который использует хук useRef для сохранения состояния:",
    {
      "type": "code",
      "title": "Компонент App.js (с хуком useRef)",
      "code": "import React, { useRef } from 'react'; const App = () => { const countRef = useRef(0); const increment = () => { countRef.current++; console.log('Текущее значение счётчика (useRef):', countRef.current); }; return ( <div> <h1>Использование хука useRef</h1> <p>Текущее значение счётчика: {countRef.current}</p> <button onClick={increment}>Увеличить счётчик</button> </div> ); }; export default App;"
    },
    "",
    "Шаг 3. Запуск и просмотр результата:",
    "- Запустите проект с помощью команды `npm start` или аналогичной.",
    "- Откройте браузер и нажмите на кнопку «Увеличить счётчик». Обратите внимание, что значение счётчика в консоли увеличивается, но на странице отображается `0`, так как useRef не вызывает перерендер компонента.",
    "",
    "Шаг 4. Внесение изменений для отображения состояния из useRef:",
    "- Обновите компонент `App.js`, добавив состояние с помощью useState для отображения значения из useRef:",
    {
      "type": "code",
      "title": "Компонент App.js (с отображением состояния из useRef)",
      "code": "import React, { useRef, useState } from 'react'; const App = () => { const countRef = useRef(0); const [count, setCount] = useState(0); const increment = () => { countRef.current++; setCount(countRef.current); console.log('Текущее значение счётчика (useRef):', countRef.current); }; return ( <div> <h1>Использование хука useRef</h1> <p>Текущее значение счётчика: {count}</p> <button onClick={increment}>Увеличить счётчик</button> </div> ); }; export default App;"
    },
    "",
    "Шаг 5. Запуск и просмотр результата с обновлённым кодом:",
    "- Перезапустите проект с помощью команды `npm start` или аналогичной.",
    "- Откройте браузер и нажмите на кнопку «Увеличить счётчик». Обратите внимание, что значение счётчика теперь увеличивается как в консоли, так и на странице, подтверждая, что состояние сохраняется с помощью useRef.",
    "",
    "Заключение:",
    "- Вы освоили использование хука useRef для сохранения состояния между рендерами без вызова перерендера компонента и подтвердили это на практике."
  ],
  "reflection_questions": [
    "В каких случаях использование useRef предпочтительнее использования useState?",
    "Какие ограничения у useRef по сравнению с useState?",
    "Какие сценарии использования useRef наиболее распространены в React-разработке?"
  ],
  "additional_materials": [
    {
    "type": "link",
    "title": "Файлы для выполнения упражнения",
    "name": "1",
    "folder": "1",
    "chapter": "5.15"
    },     
    "Документация React: https://react.dev/reference/react/useRef"
  ],
  "final_conclusion": [
    "Вы освоили использование хука useRef в React для сохранения состояния между рендерами без вызова перерендера компонента."
  ]
}