{
  "title": "Создание структуры данных в коде программы JavaScript на основе графической модели дерева",
  "goals": [
    "Практическое освоение техники перевода графической модели дерева в код JavaScript.",
    "Закрепление навыков работы с объектами и классами в JavaScript."
  ],
  "training_topic": "Моделирование структуры данных дерева, создание объектов и классов в JavaScript.",
  "required_resources": [
    "Изображение графа, являющееся деревом (предоставляется преподавателем).",
    "Редактор кода (VS Code, Sublime Text и т.д.)."
  ],
  "instructions": [
    "Введение в упражнение:",
    "- Ваша задача — перевести графическую модель дерева в программу на JavaScript двумя способами: через объектный литерал и через создание классов с установлением связей между узлами.",
    "",
    "Часть 1. Создание дерева в виде объектного литерала:",
    "- Рассмотрим простоту и лаконичность создания дерева с помощью объектного литерала.",
    "",
    "Шаг 1. Открытие изображения графа:",
    "- Изучите предоставленную графическую модель дерева, обратив особое внимание на структуру и иерархию узлов.",
    "",
    "Шаг 2. Моделирование структуры дерева в коде:",
    "- В редакторе кода создайте пустой объект, который станет корневым элементом дерева.",
    "- Внутри корневого объекта создайте дочерние объекты, имитирующие подчинённые узлы дерева.",
    "- Продублируйте подобную структуру для всех остальных узлов, создавая подобие иерархии, отображённой на графике.",
    "",
    "Шаг 3. Завершение первой части:",
    "- Приведите вашу реализацию дерева в виде объектного литерала, убедившись, что все узлы и связи соответствуют графическому изображению.",
    "",
    "Пример реализации объектного литерала:",
    {
      "type": "code",
      "title": "Дерево в виде объектного литерала",
      "code": "const tree = { root: 'Корень', children: [{ name: 'Ребенок 1', children: [] }, { name: 'Ребенок 2', children: [{ name: 'Внук 1', children: [] }, { name: 'Внук 2', children: [] }]}, { name: 'Ребенок 3', children: []}]};"
    },
    "",
    "Часть 2. Создание дерева при помощи классов и установления связей между узлами:",
    "- Во второй части мы создадим более гибкий и управляемый способ моделирования дерева с помощью классов и методов.",
    "",
    "Шаг 1. Создание класса Node:",
    "- В редакторе кода создайте класс Node, который будет служить основой для создания узлов дерева.",
    "- Класс должен включать конструкторы и методы для добавления дочерних узлов и получения родителей.",
    "",
    "Шаг 2. Имитация иерархии графа с помощью экземпляров класса Node:",
    "- Воспользуйтесь конструкторами класса для создания отдельных узлов, соответствующих изображенному дереву.",
    "- Свяжите узлы друг с другом, устанавливая взаимоотношения «ребёнок–родитель».",
    "",
    "Шаг 3. Методы для работы с узлами:",
    "- Реализуйте методы для просмотра и редактирования структуры дерева, такие как addChild, getParent, traverseTree и т.д.",
    "",
    "Шаг 4. Завершение второй части:",
    "- Убедитесь, что созданная вами структура соответствует исходному графическому изображению дерева.",
    "",
    "Пример реализации класса Node и структуры дерева:",
    {
      "type": "code",
      "title": "Создание структуры дерева с помощью классов",
      "code": "class Node { constructor(name) { this.name = name; this.children = []; this.parent = null;} addChild(child) { this.children.push(child); child.parent = this;} traverseTree(callback) { callback(this); this.children.forEach(child => child.traverseTree(callback));}} // Создание корней и листьев дерева const root = new Node('Корень'); const child1 = new Node('Ребенок 1'); const child2 = new Node('Ребенок 2'); const grandchild1 = new Node('Внук 1'); const grandchild2 = new Node('Внук 2'); const child3 = new Node('Ребенок 3'); // Связывание узлов root.addChild(child1); root.addChild(child2); root.addChild(child3); child2.addChild(grandchild1); child2.addChild(grandchild2);"
    },
    "",
    "Заключение:",
    "- Вы освоили оба способа моделирования дерева: объектный литерал и создание классов с установлением связей между узлами."
  ],
  "reflection_questions": [
    "Какие преимущества имеет объектный литерал перед классовым подходом и наоборот?",
    "Какие сложности возникли при установлении связей между узлами в классе Node?",
    "Как можно расширить функционал класса Node для большей гибкости работы с деревом?"
  ],
  "additional_materials": [
    {
      "type": "image",
      "title": "Дерево",
      "name": "1",
      "folder": "5",
      "chapter": "3.3"
    },
    "Книга «Разработка фронтенд-приложений» — раздел 3.3 'Граф. Дерево'."
  ],
  "final_conclusion": [
    "Вы освоили моделирование структуры данных дерева двумя способами: объектным литералом и классом с методами. Оба подхода пригодятся в различных ситуациях разработки программного обеспечения."
  ]
}